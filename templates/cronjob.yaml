{{- $replica := printf "%s-1.%s-headless" .Release.Name  .Release.Name -}}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-backup
  labels:
    {{- include "mysql-replication.labels" . | nindent 4 }}
  namespace: {{ $.Release.Namespace }}
spec:
  schedule: "* 4 * * *"
  timeZone: "Asia/Shanghai"
  jobTemplate:
    metadata:
      labels:
        {{- include "mysql-replication.labels" . | nindent 8 }}
    spec:
      ttlSecondsAfterFinished: 86400 # 一天后清理掉任务
      backoffLimit: 0 # 失败重试次数
      template:
        spec:
          restartPolicy: Never
          volumes:
            - name: workspace
              emptyDir:
                medium: Memory
        
          # 任务队列
          initContainers:
            - name: replica-stop # 暂停主从同步
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["mysqladmin", "-h{{ $replica }}"]
              args:
                - stop-slave
              # 环境变量 
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password

            - name: mysql-dump # 备份数据库到 SQL
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: [ "mysqldump", "--set-gtid-purged=OFF", "--skip-add-drop-table", "-h{{ $replica }}", "-uroot" ]
              args:
                - {{ .Values.cronjob.database }}
                - --result-file=/workspace/dump.sql
              # 环境变量 
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password
              volumeMounts:
                - name: workspace
                  readOnly: false
                  mountPath: /workspace

            - name: replica-start # 恢复主从同步
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["mysqladmin", "-h{{ $replica }}"]
              args:
                - start-slave
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password

            - name: mysql-drop # 丢弃备份库
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["bash", "-c"]
              args:
                - mysql -h{{ $replica }} -uroot -e "DROP DATABASE IF EXISTS {{ .Values.cronjob.database }}_$(date -u +%a);"
              # 环境变量 
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password

            - name: mysql-create # 创建备份库
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["bash", "-c"]
              args:
                - mysql -h{{ $replica }} -uroot -e "CREATE DATABASE IF NOT EXISTS {{ .Values.cronjob.database }}_$(date -u +%a) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
              # 环境变量 
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password
            
            - name: mysql-import # 导入 SQL 到备份库
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["bash", "-c"]
              args:
                - sleep 1;
                  date;
                  mysql -h{{ $replica }} -uroot {{ .Values.cronjob.database }}_$(date -u +%a) < /workspace/dump.sql
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-root
                      key: password
              volumeMounts:
                - name: workspace
                  readOnly: true
                  mountPath: /workspace

          containers:
            - name: mysql
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["bash", "-c"]
              args:
                - echo "Backup {{ .Values.cronjob.database }} as {{ .Values.cronjob.database }}_$(date -u +%a) successfully."